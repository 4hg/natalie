class SpecFailedException < StandardError; end

@context = []
@specs = []

class Context
  def initialize(description)
    @description = description
    @before_each = []
  end

  attr_reader :description, :before_each

  def add_before_each(block)
    @before_each << block
  end

  def to_s
    @description
  end
end

def describe(description)
  @context << Context.new(description)
  yield
  @context.pop
end

def xit(test, &block)
  @specs << [@context.dup, test, nil]
end

def it(test, &block)
  @specs << [@context.dup, test, block]
end

def before(type, &block)
  raise 'I only know how to do before(:each)' unless type == :each
  @context.last.add_before_each(block)
end

class Matcher
  def initialize(subject, inverted, args)
    @subject = subject
    @inverted = inverted
    @args = args
    if @args.any?
      match_expectation(@args.first)
    end
  end

  def ==(other)
    if @subject != other
      raise SpecFailedException, @subject.inspect + ' should be == to ' + other.inspect
    end
  end

  def match_expectation(expectation)
    if @inverted
      expectation.inverted_match(@subject)
    else
      expectation.match(@subject)
    end
  end
end

class BeNilExpectation
  def match(subject)
    if subject != nil
      raise SpecFailedException, subject.inspect + ' should be nil'
    end
  end

  def inverted_match(subject)
    if subject == nil
      raise SpecFailedException, subject.inspect + ' should not be nil'
    end
  end
end

class BeKindOfExpectation
  def initialize(klass)
    @klass = klass
  end

  def match(subject)
    if !(@klass === subject)
      raise SpecFailedException, subject.inspect + ' should be a kind of ' + @klass.inspect
    end
  end

  def inverted_match(subject)
    if @klass === subject
      raise SpecFailedException, subject.inspect + ' should not be a kind of ' + @klass.inspect
    end
  end
end

class EqualExpectation
  def initialize(other)
    @other = other
  end

  def match(subject)
    if !subject.equal?(@other)
      raise SpecFailedException, subject.inspect + ' should be equal to ' + @other.inspect
    end
  end

  def inverted_match(subject)
    if subject.equal?(@other)
      raise SpecFailedException, subject.inspect + ' should not be equal to ' + @other.inspect
    end
  end
end

class RaiseErrorExpectation
  def initialize(klass)
    @klass = klass
  end

  def match(subject)
    begin
      subject.call
    rescue @klass
      nil # good
    rescue => e
      raise SpecFailedException, subject.inspect + ' should have raised ' + @klass.inspect + ', but instead raised ' + e.inspect
    else
      raise SpecFailedException, subject.inspect + ' should have raised ' + @klass.inspect + ', but instead raised nothing'
    end
  end

  def inverted_match(subject)
    begin
      subject.call
    rescue @klass
      raise SpecFailedException, subject.inspect + ' should not have raised ' + @klass.inspect
    end
  end
end

class Object
  def should(*args)
    Matcher.new(self, false, args)
  end

  def should_not(*args)
    Matcher.new(self, true, args)
  end

  def be_nil
    BeNilExpectation.new
  end

  def be_kind_of(klass)
    BeKindOfExpectation.new(klass)
  end

  def equal(other)
    EqualExpectation.new(other)
  end

  def raise_error(klass)
    RaiseErrorExpectation.new(klass)
  end
end

def run_specs
  @failures = []
  @skipped = []

  @specs.each do |test|
    (context, test, fn) = test
    if fn
      context.each do |con|
        con.before_each.each do |b|
          b.call
        end
      end
      begin
        fn.call
      rescue SpecFailedException => e
        print 'F'
        @failures << [context, test, e.message]
      else
        print '.'
      end
    else
      @skipped << [context, test]
      print '*'
    end
  end

  if @failures.any?
    puts
    puts
    puts 'Failed specs:'
    @failures.each do |failure|
      (context, test, message) = failure
      indent = 0
      context.each do |con|
        print ' ' * indent
        puts con.to_s
        indent += 2
      end
      print ' ' * indent
      puts test
      indent += 2
      print ' ' * indent
      puts message
    end
    puts
    puts (@specs.size - @failures.size).to_s + ' spec(s) passed.'
    puts @failures.size.to_s + ' spec(s) failed.'
    puts @skipped.size.to_s + ' spec(s) skipped.' if @skipped.any?
    exit 1
  else
    puts
    puts
    puts @specs.size.to_s + ' spec(s) passed.'
    puts @skipped.size.to_s + ' spec(s) skipped.' if @skipped.any?
  end
end
