class SpecFailedException < StandardError; end

@context = []
@specs = []

$expectations = []

class Context
  def initialize(description)
    @description = description
    @before_each = []
    @before_all = []
  end

  attr_reader :description, :before_each, :before_all

  def add_before_each(block)
    @before_each << block
  end

  def add_before_all(block)
    @before_all << block
  end

  def to_s
    @description
  end
end

def describe(description)
  @context << Context.new(description)
  yield
  @context.pop
end

alias context describe

def it(test, &block)
  @specs << [@context.dup, test, block]
end

def fit(test, &block)
  @specs << [@context.dup, test, block, :focus]
end

def xit(test, &block)
  @specs << [@context.dup, test, nil]
end

def ruby_version_is(_)
  yield # TODO
end

def before(type, &block)
  if type == :each
    @context.last.add_before_each(block)
  elsif type == :all
    @context.last.add_before_all(block)
  else
    raise "I don't know how to do before(#{type.inspect})"
  end
end

class Matcher
  def initialize(subject, inverted, args)
    @subject = subject
    @inverted = inverted
    @args = args
    if @args.any?
      match_expectation(@args.first)
    end
  end

  def ==(other)
    if @inverted
      neq(other)
    else
      eq(other)
    end
  end

  def eq(other)
    if @subject != other
      raise SpecFailedException, @subject.inspect + ' should be == to ' + other.inspect
    end
  end

  def !=(other)
    if @inverted
      eq(other)
    else
      neq(other)
    end
  end

  def neq(other)
    if @subject == other
      raise SpecFailedException, @subject.inspect + ' should not (!) be == to ' + other.inspect
    end
  end

  def match_expectation(expectation)
    if @inverted
      expectation.inverted_match(@subject)
    else
      expectation.match(@subject)
    end
  end
end

class BeNilExpectation
  def match(subject)
    if subject != nil
      raise SpecFailedException, subject.inspect + ' should be nil'
    end
  end

  def inverted_match(subject)
    if subject == nil
      raise SpecFailedException, subject.inspect + ' should not be nil'
    end
  end
end

class BeKindOfExpectation
  def initialize(klass)
    @klass = klass
  end

  def match(subject)
    if !(@klass === subject)
      raise SpecFailedException, subject.inspect + ' should be a kind of ' + @klass.inspect
    end
  end

  def inverted_match(subject)
    if @klass === subject
      raise SpecFailedException, subject.inspect + ' should not be a kind of ' + @klass.inspect
    end
  end
end

class EqualExpectation
  def initialize(other)
    @other = other
  end

  def match(subject)
    if !subject.equal?(@other)
      raise SpecFailedException, subject.inspect + ' should be equal to ' + @other.inspect
    end
  end

  def inverted_match(subject)
    if subject.equal?(@other)
      raise SpecFailedException, subject.inspect + ' should not be equal to ' + @other.inspect
    end
  end
end

class RaiseErrorExpectation
  def initialize(klass, message = nil)
    @klass = klass
    @message = message
  end

  def match(subject)
    begin
      subject.call
    rescue @klass => e
      if @message.nil?
        nil # good
      elsif @message == e.message
        nil # good
      else
        raise SpecFailedException, "#{subject.inspect} should have raised #{@klass.inspect} with message #{@message.inspect}, but the message was #{e.message.inspect}"
      end
    rescue => e
      raise SpecFailedException, "#{subject.inspect} should have raised #{@klass.inspect}, but instead raised #{e.inspect}"
    else
      raise SpecFailedException, "#{subject.inspect} should have raised #{@klass.inspect}, but instead raised nothing"
    end
  end

  def inverted_match(subject)
    begin
      subject.call
    rescue @klass
      raise SpecFailedException, subject.inspect + ' should not have raised ' + @klass.inspect
    end
  end
end

class ShouldReceiveExpectation
  def initialize(subject, message)
    @subject = subject
    @message = message
    @pass = false
    $expectations << self
  end

  def and_return(result)
    should_receive_expectation_passed = -> { @pass = true }
    @subject.define_singleton_method(@message) do
      should_receive_expectation_passed.()
      result
    end
  end

  def and_raise(exception)
    should_receive_expectation_passed = -> { @pass = true }
    @subject.define_singleton_method(@message) do
      should_receive_expectation_passed.()
      raise exception
    end
  end

  def validate!
    unless @pass
      raise SpecFailedException, "#{@subject.inspect} should have received #{@message}"
    end
  end
end

class Object
  def should(*args)
    Matcher.new(self, false, args)
  end

  def should_not(*args)
    Matcher.new(self, true, args)
  end

  def be_nil
    BeNilExpectation.new
  end

  def be_kind_of(klass)
    BeKindOfExpectation.new(klass)
  end

  def equal(other)
    EqualExpectation.new(other)
  end

  def raise_error(klass, message = nil)
    RaiseErrorExpectation.new(klass, message)
  end

  def should_receive(message)
    ShouldReceiveExpectation.new(self, message)
  end

  def should_not_receive(message)
    define_singleton_method(message) do
      raise SpecFailedException, "#{message} should not have been sent to #{inspect}"
    end
  end
end

def mock(name)
  Object.new.tap do |obj|
    obj.define_singleton_method(:inspect) do
      "<mock: #{name}>"
    end
  end
end

def run_specs
  @failures = []
  @errors = []
  @skipped = []
  @tested = 0

  before_all_done = []
  any_focused = @specs.any? { |_, _, _, focus| focus }

  @specs.each do |test|
    (context, test, fn, focus) = test
    next if any_focused && !focus
    if fn
      @tested += 1
      context.each do |con|
        con.before_all.each do |b|
          unless before_all_done.include?(b)
            b.call
            before_all_done << b
          end
        end
      end
      context.each do |con|
        con.before_each.each do |b|
          b.call
        end
      end
      begin
        fn.call
        $expectations.each do |expectation|
          expectation.validate!
        end
      rescue SpecFailedException => e
        print 'F'
        @failures << [context, test, e]
      rescue => e
        print 'E'
        @errors << [context, test, e]
      else
        print '.'
      end
      $expectations = []
    else
      @skipped << [context, test]
      print '*'
    end
  end

  if @failures.any? || @errors.any?
    puts
    puts
    puts 'Failed specs:'
    (@failures + @errors).each do |failure|
      (context, test, error) = failure
      indent = 0
      context.each do |con|
        print ' ' * indent
        puts con.to_s
        indent += 2
      end
      print ' ' * indent
      puts test
      indent += 2
      print ' ' * indent
      if error.is_a?(SpecFailedException)
        line_num = nil
        error.backtrace.each do |line|
          if line !~ /spec\.nat/
            line_num = line.split(':')[1]
            break
          end
        end
        puts "#{error.message} (line #{line_num})"
      else
        puts "#{error.message} (#{error.class.name})"
        indent += 2
        error.backtrace.each do |line|
          print ' ' * indent
          puts line
        end
      end
    end
    puts
    puts "#{@tested - @failures.size} spec(s) passed."
    puts "#{@failures.size} spec(s) failed."
    puts "#{@errors.size} spec(s) errored."
    puts "#{@skipped.size} spec(s) skipped." if @skipped.any?
    exit 1
  else
    puts
    puts
    puts "#{@tested} spec(s) passed."
    puts @skipped.size.to_s + ' spec(s) skipped.' if @skipped.any?
  end
end

at_exit do
  run_specs
end
