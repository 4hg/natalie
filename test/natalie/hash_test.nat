require 'spec'

describe 'hash' do
  it 'can use any object as a key' do
    { 1 => 'val' }[1].must_equal 'val'
    { :sym => 'val' }[:sym].must_equal 'val'
    { 'str' => 'val' }['str'].must_equal 'val'
    key = Object.new
    { key => 'val' }[key].must_equal 'val'
  end

  it 'maintains insertion order' do
    hash = { 1 => 1, 2 => 2, 3 => 3, 'four' => 4, five: 5 }
    hash.inspect.must_equal '{1=>1, 2=>2, 3=>3, "four"=>4, :five=>5}'
    hash['six'] = 6
    hash.inspect.must_equal '{1=>1, 2=>2, 3=>3, "four"=>4, :five=>5, "six"=>6}'
    hash[2] = 'two'
    hash.inspect.must_equal '{1=>1, 2=>"two", 3=>3, "four"=>4, :five=>5, "six"=>6}'
    hash[2] = nil
    hash.inspect.must_equal '{1=>1, 2=>nil, 3=>3, "four"=>4, :five=>5, "six"=>6}'
    hash[2] = 'two'
    hash.inspect.must_equal '{1=>1, 2=>"two", 3=>3, "four"=>4, :five=>5, "six"=>6}'
    hash.delete(2)
    hash.inspect.must_equal '{1=>1, 3=>3, "four"=>4, :five=>5, "six"=>6}'
    hash[2] = 2
    hash.inspect.must_equal '{1=>1, 3=>3, "four"=>4, :five=>5, "six"=>6, 2=>2}'
  end

  it 'allows deletion of the last key' do
    hash = {}
    hash.inspect.must_equal '{}'
    hash.size.must_equal 0
    hash[1] = 1
    hash.inspect.must_equal '{1=>1}'
    hash.size.must_equal 1
    hash.delete(1)
    hash.inspect.must_equal '{}'
    hash.size.must_equal 0
  end

  it 'can be compared for equality' do
    {}.must_equal({})
    { 1 => 1 }.must_equal({ 1 => 1 })
    hash = { 1 => 'one', two: 2, 'three' => 3 }
    hash.must_equal(hash)
    hash.must_equal({ 1 => 'one', two: 2, 'three' => 3 })
    hash.delete(1)
    hash.delete(:two)
    hash.delete('three')
    hash.must_equal({})
  end

  it 'can be iterated over' do
    hash = { 1 => 'one', 2 => 'two', 3 => 'three' }
    keys = []
    vals = []
    r = hash.each do |key, val|
      keys << key
      vals << val
    end
    keys.must_equal([1, 2, 3])
    vals.must_equal(['one', 'two', 'three'])
    r.must_equal(hash)
  end

  it 'an entry can be modified during iteration' do
    hash = { 1 => 'one' }
    vals = []
    hash.each do |key, val|
      hash[1] = 'ONE'
      vals << val
    end
    vals.must_equal ['one']
    hash.must_equal({ 1 => 'ONE' })
    hash.size.must_equal 1
  end

  it 'the only key can be deleted during iteration' do
    hash = { 1 => 'one' }
    vals = []
    hash.each do |key, val|
      hash.delete(1)
      vals << val
    end
    vals.must_equal ['one']
    hash.must_equal({})
    hash.size.must_equal 0
  end

  it 'the current key can be deleted during iteration' do
    hash = { 1 => 'one', 2 => 'two', 3 => 'three' }
    vals = []
    hash.each do |key, val|
      hash.delete(1)
      vals << val
    end
    vals.must_equal ['one', 'two', 'three']
    hash.must_equal({ 2 => 'two', 3 => 'three' })
    hash.size.must_equal 2
  end

  it 'a future key can be deleted during iteration' do
    hash = { 1 => 'one', 2 => 'two', 3 => 'three' }
    vals = []
    hash.each do |key, val|
      hash.delete(2)
      vals << val
    end
    vals.must_equal ['one', 'three']
    hash.must_equal({ 1 => 'one', 3 => 'three' })
    hash.size.must_equal 2
  end

  it 'all keys can be deleted during iteration' do
    hash = { 1 => 'one', 2 => 'two', 3 => 'three' }
    vals = []
    hash.each do |key, val|
      hash.delete(1)
      hash.delete(2)
      hash.delete(3)
      vals << val
    end
    vals.must_equal ['one']
    hash.must_equal({})
    hash.size.must_equal 0
  end

  it 'can return its keys' do
    hash = { 1 => 'one', 2 => 'two', 3 => 'three' }
    hash.keys.must_equal [1, 2, 3]
  end

  it 'can return its values' do
    hash = { 1 => 'one', 2 => 'two', 3 => 'three' }
    hash.values.must_equal ['one', 'two', 'three']
  end
end

run_specs
