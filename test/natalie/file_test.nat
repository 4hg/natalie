require_relative '../spec_helper'

describe 'File' do
  it 'is an IO object' do
    f = File.new('test/support/file.txt')
    f.should be_kind_of(IO)
    f.close
  end

  it 'raises ENOENT when opening a file that does not exist' do
    -> {
      File.new('file_does_not_exist.txt')
    }.should raise_error(Errno::ENOENT)
  end

  describe '#read' do
    it 'reads the entire file' do
      f = File.new('test/support/file.txt')
      f.read.should == "foo bar baz\n"
      f.read.should == ''
      f.close
    end

    it 'reads specified number of bytes' do
      f = File.new('test/support/file.txt')
      f.read(4).should == 'foo '
      f.read(4).should == 'bar '
      f.read(10).should == "baz\n"
      f.read(4).should be_nil
      f.close
    end
  end

  describe '#write' do
    it 'writes to the file using an integer mode' do
      f = File.new('tmp/file_write_test.txt', File::CREAT|File::WRONLY|File::TRUNC)
      f.write('write ')
      f.close
      f = File.new('tmp/file_write_test.txt', File::CREAT|File::WRONLY|File::APPEND)
      f.write('append')
      f.close
      f = File.new('tmp/file_write_test.txt')
      f.read.should == 'write append'
      f.close
    end

    it 'writes to the file using a string mode' do
      f = File.new('tmp/file_write_test.txt', 'w')
      f.write('write ')
      f.close
      f = File.new('tmp/file_write_test.txt', 'a')
      f.write('append')
      f.close
      f = File.new('tmp/file_write_test.txt')
      f.read.should == 'write append'
      f.close
    end
  end

  describe '#fileno' do
    it 'returns the file descriptor number' do
      f = File.new('test/support/file.txt')
      f.fileno.should be_kind_of(Integer)
      f.close
    end
  end
end
