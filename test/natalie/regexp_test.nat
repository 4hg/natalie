require_relative '../spec_helper'

describe 'regexp' do
  it 'can be created' do
    r = /foo/
    r.should be_kind_of(Regexp)
  end

  describe '#inspect' do
    it 'returns a string representation' do
      r = /foo/
      r.inspect.should == "/foo/"
    end
  end

  describe '=~' do
    it 'return an integer for match' do
      result = /foo/ =~ 'foo'
      result.should == 0
      result = /bar/ =~ 'foo bar'
      result.should == 4
    end

    it 'return nil for no match' do
      result = /foo/ =~ 'bar'
      result.should == nil
    end
  end

  describe '#match' do
    describe '#size' do
      it 'returns the number of captures (including the whole match)' do
        match = /foo/.match('foo')
        match.size.should == 1
        match = /bar/.match('foo bar baz')
        match.size.should == 1
        match = /bar (baz)/.match('foo bar baz')
        match.size.should == 2
      end
    end

    describe '#length' do
      it 'returns the number of captures (including the whole match)' do
        match = /foo/.match('foo')
        match.length.should == 1
        match = /bar/.match('foo bar baz')
        match.length.should == 1
        match = /bar (baz)/.match('foo bar baz')
        match.length.should == 2
      end
    end

    describe '#to_s' do
      it 'returns the matched string' do
        match = /foo/.match('foo')
        match.to_s.should == 'foo'
        match = /bar/.match('foo bar baz')
        match.to_s.should == 'bar'
        match = /bar (baz)/.match('foo bar baz')
        match.to_s.should == 'bar baz'
      end
    end

    describe '#[]' do
      it 'returns a capture group' do
        match = /(foo) bar (baz)/.match('foo bar baz')
        match[0].should == 'foo bar baz'
        match[1].should == 'foo'
        match[2].should == 'baz'
        match[3].should == nil
      end
    end
  end
end
