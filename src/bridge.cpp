// DO NOT EDIT THIS FILE BY HAND!
// This file is generated by the lib/natalie/compiler/bridge.rb script.
// Run `make src/bridge.cpp` to regenerate this file.

#include "natalie.hpp"

namespace Natalie {

Value *FloatValue_eq_bridge(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->eq(*env , *args[0] );
    if (return_value) { return NAT_TRUE; } else { return NAT_FALSE; }
}

Value *FloatValue_eq_bridge1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->eq(*env , *args[0] );
    if (return_value) { return NAT_TRUE; } else { return NAT_FALSE; }
}

Value *FloatValue_to_s_bridge(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->to_s(*env   );
    return return_value;
}

Value *FloatValue_to_s_bridge1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->to_s(*env   );
    return return_value;
}

Value *FloatValue_eql_bridge(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->eql(  *args[0] );
    if (return_value) { return NAT_TRUE; } else { return NAT_FALSE; }
}

Value *FloatValue_cmp_bridge(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->cmp(*env , *args[0] );
    return return_value;
}

void bridge_methods(Env *env) {
    NAT_OBJECT->const_get(env, "Float", true)->define_method(env, "==", FloatValue_eq_bridge);
    NAT_OBJECT->const_get(env, "Float", true)->define_method(env, "===", FloatValue_eq_bridge1);
    NAT_OBJECT->const_get(env, "Float", true)->define_method(env, "to_s", FloatValue_to_s_bridge);
    NAT_OBJECT->const_get(env, "Float", true)->define_method(env, "inspect", FloatValue_to_s_bridge1);
    NAT_OBJECT->const_get(env, "Float", true)->define_method(env, "eql?", FloatValue_eql_bridge);
    NAT_OBJECT->const_get(env, "Float", true)->define_method(env, "<=>", FloatValue_cmp_bridge);
}

}
