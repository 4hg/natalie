def assert_equal(expected, actual)
  puts actual.inspect + " should be " + expected.inspect
end

class Foo
  def foo
    'foo'
  end

  def double(x)
    x * 2
  end
end

foo = Foo.new
assert_equal('foo', foo.foo)

assert_equal('foo', Foo.new.foo)
assert_equal(8, Foo.new.double(4))

# reopen class
class Foo
  def foo2
    'foo2'
  end
end

assert_equal('foo2', Foo.new.foo2)
assert_equal('foo', Foo.new.foo)

class Bar < Foo
  def foo
    'bar'
  end
end

assert_equal('bar', Bar.new.foo)
assert_equal(6, Bar.new.double(3))

class Baz < Foo
  def foo
    super + ' baz'
  end
end

assert_equal('foo baz', Baz.new.foo)

module M1
  def m1
    'm1'
  end
end

module M2
  def m2
    'm2'
  end
end

# reopen module
module M1
  def m1b
    'm1b'
  end
end

class Foo2
  include M1, M2
end

assert_equal('m1', Foo2.new.m1)
assert_equal('m1b', Foo2.new.m1b)
assert_equal('m2', Foo2.new.m2)

p(['Integer.class', Class, Integer.class])
p(['Class.class', Class, Class.class])
p(['Class.superclass', Module, Class.superclass])
p(['Module.class', Class, Module.class])
p(['Module.superclass', Object, Module.superclass])
p(['Integer.superclass', Numeric, Integer.superclass])
p(['Numeric.superclass', Object, Numeric.superclass])
p(['Object.superclass', BasicObject, Object.superclass])
p(['BasicObject.class', Class, BasicObject.class])
p(['BasicObject.superclass', nil, BasicObject.superclass])

class IvarTest
  def set_x(x)
    @x = x
  end

  def get_x
    @x
  end

  def set_y(y)
    instance_variable_set(:@y, y)
  end

  def get_y
    instance_variable_get(:@y)
  end
end

i = IvarTest.new
assert_equal(nil, i.get_x)
i.set_x(10)
assert_equal(10, i.get_x)
i.set_x(20)
assert_equal(20, i.get_x)
i.set_y(10)
assert_equal(10, i.get_y)
i.set_y(20)
assert_equal(20, i.get_y)

class InitMethodTest
  def initialize
    @x = 1
  end

  def x
    @x
  end
end

assert_equal(1, InitMethodTest.new.x)

class InitMethodTest2
  def initialize(x)
    @x = x
  end

  def x
    @x
  end
end

assert_equal(2, InitMethodTest2.new(2).x)
