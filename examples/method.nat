def assert_equal(expected, actual)
  puts actual.inspect + " should be " + expected.inspect
end

def foo
  'foo'
end

def double(x)
  x * 2
end

def triple x
  x * 3
end

def mul1(x, y,
         z)
  x * y * z
end

def mul2 x, y, z
  x * y * z
end

assert_equal('foo', foo)
assert_equal(4, double(2))
r = triple 3
assert_equal(9, r)
assert_equal(24, mul1(2, 3, 4))
r = mul1 2, 3, 4
assert_equal(24, r)

def scope2
  x = 1
end
x = 0
assert_equal(0, x)
scope2
assert_equal(0, x)

def block_test
  yield
end

block_test { p 1 }

b = 2
block_test do
  p b
end

def block_test2
  yield 1, 2
end

block_test2 do |b1, b2, b3|
  assert_equal(1, b1)
  assert_equal(2, b2)
  assert_equal(nil, b3)
end

block_test2 do |b1, b2|
  assert_equal(1, b1)
  assert_equal(2, b2)
end

block_test2 do |b1|
  assert_equal(1, b1)
end

block_test2 do
  puts 'no args'
end
